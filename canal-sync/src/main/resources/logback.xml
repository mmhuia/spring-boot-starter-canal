<?xml version="1.0" encoding="UTF-8"?>
<!-- configuration 属性说明 scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod: 
	设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug: 
	当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" debug="false">

    <contextName>$[app.name]</contextName>

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <property name="APP_NAME" value="$[app.name]"/>
    <property name="LOG_HOME" value="/opt/logs/${APP_NAME}"/>
    <property name="pattern" value="%date{ISO8601}\t%thread\t%level\t%logger\t%message%n"/>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <encoder>
            <pattern>${pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 打印业务日志 -->
    <appender name="FILE_APP" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/app/${APP_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${LOG_HOME}/app/${APP_NAME}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 打印所有日志 -->
    <appender name="FILE_BOOT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/boot/${APP_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${LOG_HOME}/boot/${APP_NAME}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--日志异步到Mysql数据库 -->
    <!-- <appender name="MYSQL" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource
            class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <driverClass>com.mysql.jdbc.Driver</driverClass>
                <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
                <user>root</user>
                <password>root</password>
            </dataSource>
        </connectionSource>
    </appender> -->

    <!--
    <logger>
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。
        name:
        用来指定受此logger约束的某一个包或者具体的某一个类。
        level:
        用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
        如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity:
        是否向上级logger传递打印信息。默认是true。
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
    -->

    <!--myibatis log configure -->
    <!--    <logger name="com.apache.ibatis" level="TRACE"/>-->
    <!--    <logger name="java.sql.Connection" level="DEBUG"/>-->
    <!--    <logger name="java.sql.Statement" level="DEBUG"/>-->
    <!--    <logger name="java.sql.PreparedStatement" level="DEBUG"/>-->

    <!--主程序日志-->
    <logger name="com.ym.canalsync.app" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE_APP"/>
    </logger>

    <!--
        也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。

        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
     -->
    <!-- 默认的日志输出级别为DEBUG，输出至控制台和文件 ，特殊定义logger如未设置相关属性也会继承root属性-->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE_BOOT"/>
    </root>
</configuration>